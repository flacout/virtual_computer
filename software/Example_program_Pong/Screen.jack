// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean color;
    static Array bits;

    /** Initializes the Screen. */
    function void init() {
        let color=true;

        let bits = Array.new(16);
        let bits[0] = 1;
        let bits[1] = 2;
        let bits[2] = 4;
        let bits[3] = 8;
        let bits[4] = 16;
        let bits[5] = 32;
        let bits[6] = 64;
        let bits[7] = 128;
        let bits[8] = 256;
        let bits[9] = 512;
        let bits[10] = 1024;
        let bits[11] = 2048;
        let bits[12] = 4096;
        let bits[13] = 8192;
        let bits[14] = 16384;
        let bits[15] = -16384; // 32768
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;

        let i=16384;
        while (i<24576){
            do Memory.poke(i, 0);
            let i = i+1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int q, r, address, currentValue, newValue;

        let q = x/16;
        let r = x-(q*16);
        let address = (32*y) + (x/16);
        let currentValue = Memory.peek(16384+address);
        if (color){
            let newValue = currentValue | bits[r];
        }
        else{
            let newValue = currentValue & (~bits[r]);
        }
        do Memory.poke(16384+address, newValue);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, a, b, adyMinusbdx;

        let a=0;
        let b=0;
        let dx = x2-x1;
        let dy = y2-y1;
        let adyMinusbdx = 0;

        // invert points.
        if ((dx<0) & (dy<0)){
            do Screen.drawLine(x2, y2, x1, y1);
            return;
        }
        if ((dx<0) & (dy>0)){
            do Screen.drawLine(x2, y2, x1, y1);
            return;
        }
        // inverted diagonal
        if ((dx>0) & (dy<0)){
            while ( (~(a>dx)) & (~(b<dy)) ){
                do Screen.drawPixel(x1+a, y1+b);
                if (adyMinusbdx <0){
                    let adyMinusbdx = adyMinusbdx +dx;
                    let b = b-1;
                }
                else{
                    let adyMinusbdx = adyMinusbdx +dy;
                    let a = a+1;
                }
            }
            return;
        }

        // horizontal line
        if (dy = 0 & dx >0){
            while (~(a>dx)){
                do Screen.drawPixel(x1+a, y1);
                let a = a+1;
            }
            return;
        }
        if (dy = 0 & dx <0){
            do Screen.drawLine(x2, y2, x1, y1);
            return;
        }
        // vertical line
        if (dx = 0 & dy>0){
            while (~(b>dy)){
                do Screen.drawPixel(x1, y1+b);
                let b = b+1;
            }
            return;
        }
        if (dx = 0 & dy <0){
            do Screen.drawLine(x2, y2, x1, y1);
            return;
        }

        // normal diagonal.
        while ( (~(a>dx)) & (~(b>dy)) ){
            do Screen.drawPixel(x1+a, y1+b);
            if (adyMinusbdx <0){
                let adyMinusbdx = adyMinusbdx +dy;
                let a = a+1;
            }
            else{
                let adyMinusbdx = adyMinusbdx -dx;
                let b = b+1;
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        while (~(y1>y2)){
            do Screen.drawLine(x1, y1, x2, y1);
            let y1 = y1+1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int negR, half;

        let negR = -r;
        while (~(negR>r)){
            let half = Math.sqrt( (r*r)-(negR*negR) );
            do Screen.drawLine(x-half, y+negR, x+half, y+negR);
            let negR = negR+1;
        }
        return;
    }
}
