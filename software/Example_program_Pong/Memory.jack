// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram;
    static Array heap;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048;
        let heap[1] = 14334;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int segment,sz;
        var int thisAddress;

        // find first segment with enough space
        let segment = 0;
        while (heap[segment+1] < size+2){
            if ((heap[segment] =0)){
                do Output.printString("no more heap space");
            }
            else{
                let segment = heap[segment];
            }
        }
        // allocate a block
        let thisAddress = (segment+2+heap[segment+1]) - size;
        let heap[thisAddress-1] = size; 
        //do Memory.poke(thisAddress-1, size); // remenber size of allocated segment.
        let heap[segment+1] = heap[segment+1] - (size+2); // remove memory block from the segment
        return thisAddress+2048;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int segAddress;
        var int segment;

        let segAddress = o-2;
        let segment = 0;
        // go to last segment in the list.
        while (~(heap[segment] = 0)){
            let segment = heap[segment];
        }
        // add deAlloc block to the list;
        let heap[segment] = segAddress-2048;
        return;        
    }    
}
