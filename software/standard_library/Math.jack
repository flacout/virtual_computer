// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array bits;

    /** Initializes the library. */
    function void init() {
        let bits = Array.new(16);
        let bits[0] = 1;
        let bits[1] = 2;
        let bits[2] = 4;
        let bits[3] = 8;
        let bits[4] = 16;
        let bits[5] = 32;
        let bits[6] = 64;
        let bits[7] = 128;
        let bits[8] = 256;
        let bits[9] = 512;
        let bits[10] = 1024;
        let bits[11] = 2048;
        let bits[12] = 4096;
        let bits[13] = 8192;
        let bits[14] = 16384;
        let bits[15] = -16384; // 32768
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x<0){
            return -x;
        }
        else{
            return x;
        }
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX, j;

        let sum = 0;
        let shiftedX = x;
        let j = 0;
        while (j<16){
            if (Math.bit(y,j)){
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let j = j+1;
        }
        return sum;
    }

    function boolean bit(int y, int j){
        if ( (y & bits[j]) = 0){
            return false;
        }
        else{
            return true;
        } 
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
         var int result;
         let result = Math.division(Math.abs(x),Math.abs(y));       
         if ((x<0) & ~(y<0)){ return -result;}
         if (~(x<0) & (y<0)){ return -result;}
         return result;
    }

    function int division(int x, int y){
        var int q;

        if ((y>x) | (y<0)) { 
            return 0;
        }
        let q = Math.division(x, 2*y);
        if ((x-(2*q*y)) < y ){ return 2*q;}
        else{
            return (2*q)+1;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, j;

        let y = 0;
        let j = 7;
        while(~(j<0)){
            if ( ~((y+bits[j])*(y+bits[j]) > x) & ((y+bits[j])*(y+bits[j]) > 0)){
                let y = y+bits[j];
            }
            let j = j-1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a<b){
            return b;
        }
        else{
            return a;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a<b){
            return a;
        }
        else{
            return b;
        }
    }
}
